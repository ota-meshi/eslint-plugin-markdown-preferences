# eslint-snapshot-rule-tester format: v1


Test: canonical-code-block-language >> invalid
Filename: tests/fixtures/rules/canonical-code-block-language/invalid/basic-input.md
Language: markdown/gfm
Plugins: unable to serialize

Code:
  1 | # Invalid Code Blocks
  2 |
  3 | ## JavaScript Abbreviations
  4 |
  5 | ```js
  6 | console.log('This should be javascript');
  7 | ```
  8 |
  9 | ```jsx
    |    ^~~ [1]
 10 | const Component = () => <div>JSX should be javascript</div>;
 11 | ```
 12 |
 13 | ## TypeScript Abbreviations  
 14 |
 15 | ```ts
 16 | const message: string = 'This should be typescript';
 17 | ```
 18 |
 19 | ```tsx
    |    ^~~ [2]
 20 | const Component: React.FC = () => <div>TSX should be typescript</div>;
 21 | ```
 22 |
 23 | ## Python Abbreviation
 24 |
 25 | ```py
 26 | print("This should be python")
 27 | ```
 28 |
 29 | ## Shell/Bash
 30 |
 31 | ```sh
 32 | echo "This should be bash"
 33 | ```
 34 |
 35 | ```shell
    |    ^~~~~ [3]
 36 | echo "This should also be bash"
 37 | ```
 38 |

Output:
  1 | # Invalid Code Blocks
  2 |
  3 | ## JavaScript Abbreviations
  4 |
  5 | ```js
  6 | console.log('This should be javascript');
  7 | ```
  8 |
  9 | ```js
 10 | const Component = () => <div>JSX should be javascript</div>;
 11 | ```
 12 |
 13 | ## TypeScript Abbreviations  
 14 |
 15 | ```ts
 16 | const message: string = 'This should be typescript';
 17 | ```
 18 |
 19 | ```ts
 20 | const Component: React.FC = () => <div>TSX should be typescript</div>;
 21 | ```
 22 |
 23 | ## Python Abbreviation
 24 |
 25 | ```py
 26 | print("This should be python")
 27 | ```
 28 |
 29 | ## Shell/Bash
 30 |
 31 | ```sh
 32 | echo "This should be bash"
 33 | ```
 34 |
 35 | ```sh
 36 | echo "This should also be bash"
 37 | ```
 38 |

[1] Use canonical language name "js" instead of "jsx".
[2] Use canonical language name "ts" instead of "tsx".
[3] Use canonical language name "sh" instead of "shell".
---


Test: canonical-code-block-language >> invalid
Filename: tests/fixtures/rules/canonical-code-block-language/invalid/extended-fences-input.md
Language: markdown/gfm
Plugins: unable to serialize

Code:
  1 | # Code Blocks with Extended Fences
  2 |
  3 | ## JavaScript with 4 backticks
  4 |
  5 | ````javascript
    |     ^~~~~~~~~~ [1]
  6 | ```js
  7 | console.log('nested code block');
  8 | ```
  9 | ````
 10 |
 11 | ````jsx {.example}
    |     ^~~ [2]
 12 | const Component = () => {
 13 |   return (
 14 |     <div>
 15 |       ```
 16 |       Some markdown in JSX
 17 |       ```
 18 |     </div>
 19 |   );
 20 | };
 21 | ````
 22 |
 23 | ## TypeScript with 5 backticks
 24 |
 25 | `````typescript {highlight: true}
    |      ^~~~~~~~~~ [3]
 26 | const example = `
 27 | ````markdown
 28 | # Nested markdown
 29 | ````
 30 | `;
 31 | `````
 32 |
 33 | `````tsx filename="example.tsx"
    |      ^~~ [4]
 34 | const Component = () => (
 35 |   <pre>
 36 |     ````js
 37 |     console.log('hello');
 38 |     ````
 39 |   </pre>
 40 | );
 41 | `````
 42 |
 43 | ## Python with 4 backticks
 44 |
 45 | ````python {.python}
    |     ^~~~~~ [5]
 46 | def example():
 47 |     markdown = """
 48 |     ```python
 49 |     print("nested")
 50 |     ```
 51 |     """
 52 |     return markdown
 53 | ````
 54 |
 55 | ## Shell with extended fences
 56 |
 57 | ````bash {copy: false}
    |     ^~~~ [6]
 58 | cat << 'EOF'
 59 | ```shell
 60 | echo "nested command"
 61 | ```
 62 | EOF
 63 | ````
 64 |
 65 | ````shell {theme: "dark"}
    |     ^~~~~ [7]
 66 | # Script with nested markdown
 67 | cat > README.md << 'EOF'
 68 | ```bash
 69 | ./script.sh
 70 | ```
 71 | EOF
 72 | ````
 73 |
 74 | ## YAML with extended fences
 75 |
 76 | ````yml {collapse: true}
    |     ^~~ [8]
 77 | documentation: |
 78 |   Example with code:
 79 |   ```yaml
 80 |   key: value
 81 |   ```
 82 | ````
 83 |

Output:
  1 | # Code Blocks with Extended Fences
  2 |
  3 | ## JavaScript with 4 backticks
  4 |
  5 | ````js
  6 | ```js
  7 | console.log('nested code block');
  8 | ```
  9 | ````
 10 |
 11 | ````js {.example}
 12 | const Component = () => {
 13 |   return (
 14 |     <div>
 15 |       ```
 16 |       Some markdown in JSX
 17 |       ```
 18 |     </div>
 19 |   );
 20 | };
 21 | ````
 22 |
 23 | ## TypeScript with 5 backticks
 24 |
 25 | `````ts {highlight: true}
 26 | const example = `
 27 | ````markdown
 28 | # Nested markdown
 29 | ````
 30 | `;
 31 | `````
 32 |
 33 | `````ts filename="example.tsx"
 34 | const Component = () => (
 35 |   <pre>
 36 |     ````js
 37 |     console.log('hello');
 38 |     ````
 39 |   </pre>
 40 | );
 41 | `````
 42 |
 43 | ## Python with 4 backticks
 44 |
 45 | ````py {.python}
 46 | def example():
 47 |     markdown = """
 48 |     ```python
 49 |     print("nested")
 50 |     ```
 51 |     """
 52 |     return markdown
 53 | ````
 54 |
 55 | ## Shell with extended fences
 56 |
 57 | ````sh {copy: false}
 58 | cat << 'EOF'
 59 | ```shell
 60 | echo "nested command"
 61 | ```
 62 | EOF
 63 | ````
 64 |
 65 | ````sh {theme: "dark"}
 66 | # Script with nested markdown
 67 | cat > README.md << 'EOF'
 68 | ```bash
 69 | ./script.sh
 70 | ```
 71 | EOF
 72 | ````
 73 |
 74 | ## YAML with extended fences
 75 |
 76 | ````yaml {collapse: true}
 77 | documentation: |
 78 |   Example with code:
 79 |   ```yaml
 80 |   key: value
 81 |   ```
 82 | ````
 83 |

[1] Use canonical language name "js" instead of "javascript".
[2] Use canonical language name "js" instead of "jsx".
[3] Use canonical language name "ts" instead of "typescript".
[4] Use canonical language name "ts" instead of "tsx".
[5] Use canonical language name "py" instead of "python".
[6] Use canonical language name "sh" instead of "bash".
[7] Use canonical language name "sh" instead of "shell".
[8] Use canonical language name "yaml" instead of "yml".
---


Test: canonical-code-block-language >> invalid
Filename: tests/fixtures/rules/canonical-code-block-language/invalid/meta-info-input.md
Language: markdown/gfm
Plugins: unable to serialize

Code:
  1 | # Code Blocks with Meta Information
  2 |
  3 | ## JavaScript with meta info
  4 |
  5 | ```javascript {highlight: [1, 3]}
    |    ^~~~~~~~~~ [1]
  6 | console.log('Line 1');
  7 | const x = 1;
  8 | console.log('Line 3');
  9 | ```
 10 |
 11 | ```jsx {.class #id}
    |    ^~~ [2]
 12 | const Component = () => <div>JSX with attributes</div>;
 13 | ```
 14 |
 15 | ## TypeScript with meta info
 16 |
 17 | ```typescript {linenos=table}
    |    ^~~~~~~~~~ [3]
 18 | const message: string = 'TypeScript with line numbers';
 19 | ```
 20 |
 21 | ```tsx filename="Component.tsx"
    |    ^~~ [4]
 22 | const Component: React.FC = () => <div>TSX with filename</div>;
 23 | ```
 24 |
 25 | ## Python with meta info
 26 |
 27 | ```python {.python-code startFrom="10"}
    |    ^~~~~~ [5]
 28 | print("Python with class and line start")
 29 | ```
 30 |
 31 | ## Shell with meta info
 32 |
 33 | ```bash {copy: false}
    |    ^~~~ [6]
 34 | echo "Bash with copy disabled"
 35 | ```
 36 |
 37 | ```shell {theme: "dark"}
    |    ^~~~~ [7]
 38 | echo "Shell with theme"
 39 | ```
 40 |
 41 | ## YAML with meta info
 42 |
 43 | ```yml {collapse: true}
    |    ^~~ [8]
 44 | name: example
 45 | version: 1.0.0
 46 | ```
 47 |

Output:
  1 | # Code Blocks with Meta Information
  2 |
  3 | ## JavaScript with meta info
  4 |
  5 | ```js {highlight: [1, 3]}
  6 | console.log('Line 1');
  7 | const x = 1;
  8 | console.log('Line 3');
  9 | ```
 10 |
 11 | ```js {.class #id}
 12 | const Component = () => <div>JSX with attributes</div>;
 13 | ```
 14 |
 15 | ## TypeScript with meta info
 16 |
 17 | ```ts {linenos=table}
 18 | const message: string = 'TypeScript with line numbers';
 19 | ```
 20 |
 21 | ```ts filename="Component.tsx"
 22 | const Component: React.FC = () => <div>TSX with filename</div>;
 23 | ```
 24 |
 25 | ## Python with meta info
 26 |
 27 | ```py {.python-code startFrom="10"}
 28 | print("Python with class and line start")
 29 | ```
 30 |
 31 | ## Shell with meta info
 32 |
 33 | ```sh {copy: false}
 34 | echo "Bash with copy disabled"
 35 | ```
 36 |
 37 | ```sh {theme: "dark"}
 38 | echo "Shell with theme"
 39 | ```
 40 |
 41 | ## YAML with meta info
 42 |
 43 | ```yaml {collapse: true}
 44 | name: example
 45 | version: 1.0.0
 46 | ```
 47 |

[1] Use canonical language name "js" instead of "javascript".
[2] Use canonical language name "js" instead of "jsx".
[3] Use canonical language name "ts" instead of "typescript".
[4] Use canonical language name "ts" instead of "tsx".
[5] Use canonical language name "py" instead of "python".
[6] Use canonical language name "sh" instead of "bash".
[7] Use canonical language name "sh" instead of "shell".
[8] Use canonical language name "yaml" instead of "yml".
---
